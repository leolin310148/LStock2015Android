package me.leolin.twse.data;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import me.leolin.twse.data.SubscriptionEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SUBSCRIPTION_ENTITY.
*/
public class SubscriptionEntityDao extends AbstractDao<SubscriptionEntity, String> {

    public static final String TABLENAME = "SUBSCRIPTION_ENTITY";

    /**
     * Properties of entity SubscriptionEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property StockId = new Property(0, String.class, "stockId", true, "STOCK_ID");
        public final static Property Order = new Property(1, Integer.class, "order", false, "ORDER");
        public final static Property SetId = new Property(2, Long.class, "setId", false, "SET_ID");
    };

    private Query<SubscriptionEntity> subscriptionSetEntity_SubscriptionEntityListQuery;

    public SubscriptionEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SubscriptionEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SUBSCRIPTION_ENTITY' (" + //
                "'STOCK_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: stockId
                "'ORDER' INTEGER," + // 1: order
                "'SET_ID' INTEGER);"); // 2: setId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SUBSCRIPTION_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SubscriptionEntity entity) {
        stmt.clearBindings();
 
        String stockId = entity.getStockId();
        if (stockId != null) {
            stmt.bindString(1, stockId);
        }
 
        Integer order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(2, order);
        }
 
        Long setId = entity.getSetId();
        if (setId != null) {
            stmt.bindLong(3, setId);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SubscriptionEntity readEntity(Cursor cursor, int offset) {
        SubscriptionEntity entity = new SubscriptionEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // stockId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // order
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // setId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SubscriptionEntity entity, int offset) {
        entity.setStockId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOrder(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSetId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SubscriptionEntity entity, long rowId) {
        return entity.getStockId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SubscriptionEntity entity) {
        if(entity != null) {
            return entity.getStockId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "subscriptionEntityList" to-many relationship of SubscriptionSetEntity. */
    public List<SubscriptionEntity> _querySubscriptionSetEntity_SubscriptionEntityList(Long setId) {
        synchronized (this) {
            if (subscriptionSetEntity_SubscriptionEntityListQuery == null) {
                QueryBuilder<SubscriptionEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SetId.eq(null));
                subscriptionSetEntity_SubscriptionEntityListQuery = queryBuilder.build();
            }
        }
        Query<SubscriptionEntity> query = subscriptionSetEntity_SubscriptionEntityListQuery.forCurrentThread();
        query.setParameter(0, setId);
        return query.list();
    }

}
